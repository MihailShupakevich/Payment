version: '3.8'

services:
  order-service:
    image: order_service_image
    build:
      context: .
      dockerfile: OrderService/Dockerfile
    security_opt:
      - apparmor=unconfined
    environment:
      KAFKA_BROKER: kafka:9092  # Укажите адрес Kafka брокера
      POSTGRES_HOST: postgres # Укажите адрес Postgres
      POSTGRES_USER: admin  # Укажите пользователя Postgres
      POSTGRES_PASSWORD: admin  # Укажите пароль Postgres
      POSTGRES_DB: payment  # Укажите БД
    depends_on:
      - kafka
      - postgres
    ports:
      - "8080:8080"
    networks:
      main_network:

  payment-service:
    image: payment_service_image
    build:
      context: .
      dockerfile: PaymentService/Dockerfile
    security_opt:
      - apparmor=unconfined
    depends_on:
      - kafka
    environment:
      KAFKA_BROKER: kafka:9092  # Укажите адрес Kafka брокера
    networks:
      main_network:

  nats:
    image: nats:latest
    restart: unless-stopped
    volumes:
      - ./nats-config.conf:/nats-config.conf
    ports:
      - "4222:4222"
      - "8223:8222"
    networks:
      main_network:

  nats-webui:
    image: sphqxe/nats-webui:latest
    restart: unless-stopped
    ports:
      - "8222:80"
    depends_on:
      - nats
    networks:
      main_network:

  postgres:
    image: postgres:latest
    restart: unless-stopped
    ports:
      - "5432:5432"

    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: payment
      Database_URL: jdbc:postgresql://localhost:5432/payment
    networks:
      main_network:

  zookeeper:
    image: "docker.io/bitnami/zookeeper:3-debian-10"
    ports:
      - "2181:2181"
    restart: unless-stopped
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    volumes:
      - zookeeper_data:/bitnami/zookeeper
    networks:
      main_network:

  kafka:
    image: bitnami/kafka:2.8.1-debian-11-r7
    ports:
      - "9092:9092"
#      - "9094:9094"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: "zookeeper:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"
#      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://127.0.0.1:9094,INSIDE://kafka:9092
#      KAFKA_LISTENERS: OUTSIDE://:9094,INSIDE://:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9092
      KAFKA_LISTENERS: INSIDE://:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT
#      ,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CREATE_TOPICS: "call-list-checker"
    restart: unless-stopped
    volumes:
      - kafka_data:/bitnami/kafka
    depends_on:
      - zookeeper
    networks:
      main_network:

  console:
    image: docker.redpanda.com/redpandadata/console:latest
    environment:
      KAFKA_BROKERS: kafka:9092
    ports:
      - 8381:8080
    restart: unless-stopped
    depends_on:
      - kafka
    networks:
      main_network:

  redis:
    image: "redis:latest"
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
      - REDIS_PASSWORD=passwd
    ports:
      - 6379:6379
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      main_network:

  clickhouse-server:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
      - "9009:9009"
    environment:
      - CLICKHOUSE_USER=admin
      - CLICKHOUSE_PASSWORD=admin
      - ALLOW_EXPERIMENTAL_OBJECT_TYPE=1
    restart: unless-stopped
    volumes:
      - ./:/app
    depends_on:
      - kafka
      - postgres
    networks:
      main_network:

  centrifugo:
    image: centrifugo/centrifugo:v5.1
    volumes:
      - ./centrifugo-config/config.json:/centrifugo/config.json
    command: centrifugo -c config.json
    restart: unless-stopped
    ports:
      - 8000:8000
    depends_on:
      - redis
    networks:
      main_network:

networks:
  main_network:
    driver: bridge
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local
  postgres_data:
    driver: local
